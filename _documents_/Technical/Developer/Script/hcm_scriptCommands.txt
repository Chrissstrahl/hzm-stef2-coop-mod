This list contains all new coop specific or changed script commands
==============================================================================
==============================================================================

Level Variables ($world.getFloatVar("name"), $world.getStringVar("name"))
==============================================================================
isCoopServer -> default 0 is set to 1 if the server is a coop server
isCoopActive -> default 0 is set to 1 if the coop mod is currently active on a coop map
isCoopLevel -> default 0 is set to 1 if the currently loaded level is a coop level
coop_failureReason -> default "" is set to the string why the mission failed when the mission fails
coop_NextMapToLoad -> default "" is set to the string of the next map to load when it is set
total_specialItems -> this is a stock game feature, contains the number of secret ships on the level
found_specialItems -> this is a stock game feature, contains the number of secret ships found
total_secrets -> this is a stock game feature, contains the number of secrets on the level
found_secrets -> this is a stock game feature, contains the number of secrets found
total_enemies_spawned -> this is a stock game feature, contains the number of enemies spawned
holster_active -> this is a stock game feature, set to 1 if player has wepon holstered (Singleplayer)
globalCoop_missionFailedUserString -> default 0, set to 1 if a custom string is set for the coop_failureReason
coop_noBeamout -> default 0, if set to 1 players will not beam out on death

Player get entity targeted by player (object player is aiming on) (eTarget = $player0.getTargetedEntity();)
==============================================================================
.getTargetedEntity, default returns reference on $world, contains a reference on the entity the player is aiming on (compare via targetname or origin if you must)


Added and existing svflags commands for entities ($enemy.svflags("+noclient");)
==============================================================================
+ in front adds a flag / - in front clears a flag. Example: +noclient/-noclient
noclient			//don't send entity to clients, even if it has effects (c++ SVF_NOCLIENT)
broadcast			//send to all connected clients (c++ SVF_BROADCAST)
monsterclip			//treat as CONTENTS_MONSTERCLIP for collision (c++ SVF_MONSTERCLIP)
playerclip			//treat as CONTENTS_PLAYERCLIP for collision (c++ SVF_PLAYERCLIP)
sendonce			//Send this entity over the network at least one time (c++ SVF_SENDONCE)
use_current_origin	// entity->currentOrigin instead of entity->s.origin (c++ SVF_USE_CURRENT_ORIGIN)


Player Variables ($player0.getFloatVar("name"), $player0.getStringVar("name"))
==============================================================================
globalclassName -> default "", contains the coop class of the player as string
_playerIsBot -> default is 0, is set to 1 if the player is a bot
globalCoop_timeEntered -> default is 0, current level time is set when a player enters the game
coop_respawnAtRespawnpoint -> default is 0, used to force player respawning at a fixed spawnlocation when set to 1
coop_registredHud1 -> default "" -> used to add special huds upon respawn when their names are set (range 1 to 8)
_playerIsSolvingPuzzle -> default 0, set to 1 if player is doing a puzzle
_playerKilledByEntity -> default 0, set to client number of the killer
_playerKilledByName -> default "", set to killer netname
_playerKilledByClass -> default "", set to killer classname (Player,Actor,...)
_playerKilledByActor -> default "", set to Actor name when killed by actor
_playerKilledByMeans -> default "", set to the means by which this player was killed
_playerKilledByMeansName -> default "", set to the name of the means by which this player was killed
_puzzleLastMessage -> default 0, stores the time when the last message of a puzzle was shown to this player
_playerCurrentViewMode -> default "Normal", stores the current viewmode of this player


Puzzle object ($player0.getFloatVar("name"))
==============================================================================
_activator -> default -1, stores the clientnumber of the player last using this puzzle


Automatic Script File
==============================================================================
If a map has no own level-script the coop mod is using default.scr to provide
the current map with all coop script assets.


uservar1 - uservar4 on $world (from inside the LevelEditor)
==============================================================================
If set on a World brush  it will be used to setup
certain Coop Mod data that will be displayed in the Objectives menu
uservar1 = Level Author Name
uservar2 = Level Story (English)
uservar3 = Level Story (German)


uservar5 to uservar10
==============================================================================
Additional uservar variables can be set to entities uservar5 to uservar10
from within the Level Editor (or like always scripts) on any entity.
Default was uservar1 to uservar4 only.
Uservar value can be string, float or vector.


waitfor
==============================================================================
actor.cpp, protection for waitfor loop runaway errors


Archtypes
==============================================================================
New Archetypes for the Tricorder and general Targeting of objects:
Destroy, Scan, Team, Friend, Hostile, Use
Example:
$enemy1.archetype( "Hostile" );


coop_ui_targeted


Change a existing Variable In Script
==============================================================================
Allows to change the Value of a existing Variable in the script.
This allows to use with loops generated variable names.
Example:
float i = 3;
setVectorScriptVariable("variableNameHere"+i, '0 0 0');
setFloatScriptVariable("variableNameHere"+i, 1.51);
setStringScriptVariable("variableNameHere"+i, "some text here");


Get value of a existing Script Variable
==============================================================================
Allows to get the Value of a existing Variable in the script.
This allows to use with loops generated variable names.
Example:
float i = 3;
float iValue;
vector vValue;
string sValue;
vValue = getVectorScriptVariable("variableNameHere"+i);
iValue = getFloatScriptVariable("variableNameHere"+i);
sValue = getStringScriptVariable("variableNameHere"+i);


configstringRemoveCombatSounds (configstringRemoveCombatSounds("chell");)
==============================================================================
Removes associated predefined and precached configstrings for named actor.
Like: localization/sound/dialog/combat/chell_holdfire.mp3

configstringRemove (configstringRemove("models/char/dm_romulan_rebel-commander.tik");)
==============================================================================
Removes the given configstrings if found

Gets a part of the source string, from start to end
==============================================================================
Allows to return only a part of  string in script.
This can be used inside loops to iterate each letter of a string.
Example:
string sPart;
sPart = getStringFromStringWithLengt("No Grinch is happy at Christmas",22,9);


Gets the Lowercase version of the given string
==============================================================================
string sLower;
sLower = getStringToLower("THIS IS ALL UPERCASE");


Gets the Upercase version of the given string
==============================================================================
Parameters: 1=string source
Example:
string sUper;
sUper = getStringToUpper("this is all lowercase");

Get the string length
==============================================================================
Parameters: 1=string source
Example:
float iLength;
iLength = getIntStringLength("this is just a random string");


string getStringPlayerName(entity player);
string getStringPlayerLanguage(entity player);
string getStringPlayerTeam(entity player);
int getIntPlayerTeamScore(entity player);
int getIntPlayerScore(entity player);
int getIntPlayerDeaths(entity player);
int getIntPlayerKills(entity player);
int getIntPlayerSpectator(entity player);
int getIntPlayerHasCoop(entity player);
int getIntPlayerLastDamaged(entity player);
int getIntStringFind(string source,string search);
float getFloatFromString(string source);
string getStringEntitySubclass(entity any);
float getFloatScriptVariable(string variableName);
vector getVectorScriptVariable(string variableName);
string getStringScriptVariable(string variableName);
int addPlayerIntScore(entity player,int score);
int isEntityInsideOfEntity(entity any, entity any);
int isDigit(string singleLetter);
string solidAsap(entity any);
string getLevelParamaterValue(string paramaterName);


