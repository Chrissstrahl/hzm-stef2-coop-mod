//-----------------------------------------------------------------------------------
// Script By:	Christian Sebastian Strahl (Chrissstrahl)
// Created on:	2008.??.??
// E-Mail:		chrissstrahl@yahoo.de
// Organisation:	HaZardModding
//
// CONTAINS SERVER RELATED JOBS

//HAZARDMODDING CO-OP SCRIPT MODIFICATION ©2006-2015 SOME RIGHTS RESERVED AND
//(IP)INTELLECTUAL PROPERTY HELD BY CHRISTIAN SEBASTIAN STRAHL, ALIAS CHRISSSTRAHL.

//YOU ARE EXPLICITE FORBIDDEN TO USE/MODIFIE/REDISTRIBUTE/REPLICATE/RELEASE/REBUILD/COPY
//ANY MATERIALS OR INTELLECTUAL PROPERTY OF THIS FILE WITHOUT THE EXPLICIT
//WRITTEN PERMISSION OF THE RESPECTIVE OWNERS!

//
//CONTACT: chrissstrahl@yahoo.de [Christian Sebastian Strahl, Germany]
//-----------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------

void globalCoop_server_itemUnlockedSet(string sWeaponModel)
//----------------------------------------------------------------------
// Fake function, will be catched inside gamex86.dll and managed via the c++ code and stored in coop_status.ini
//----------------------------------------------------------------------
{
	//keep this dummy function, it is needed for the c++ code to work with the script
	thread globalCoop_server_itemUnlockedSet_dll(sWeaponModel);
}
void globalCoop_server_itemUnlockedSet_dll(string sWeaponModel)
//----------------------------------------------------------------------
// Fake function, will be catched inside gamex86.dll and managed via the c++ code and stored in coop_status.ini
//----------------------------------------------------------------------
{
	//keep this dummy function, it is needed for the c++ code to work with the script
}
void globalCoop_server_itemLockedSet(string sWeaponModel)
//----------------------------------------------------------------------
// Fake function, will be catched inside gamex86.dll and managed via the c++ code and stored in coop_status.ini
//----------------------------------------------------------------------
{
	//keep this dummy function, it is needed for the c++ code to work with the script
	thread globalCoop_server_itemLockedSet_dll(sWeaponModel);
}
void globalCoop_server_itemLockedSet_dll(string sWeaponModel)
//----------------------------------------------------------------------
// Fake function, will be catched inside gamex86.dll and managed via the c++ code and stored in coop_status.ini
//----------------------------------------------------------------------
{
	//keep this dummy function, it is needed for the c++ code to work with the script
}

/*
string globalCoop_server_entryGet(string sFile, string sKey, string sSection)
//----------------------------------------------------------------------
// Fake function, will be catched inside gamex86.dll and managed via the c++ code and stored in coop_status.ini
//----------------------------------------------------------------------
{
	//keep this dummy function, it is needed for the c++ code to work with the script
	//thread globalCoop_server_entryGet_dll(sFile, sKey, sSection);
	globalCoop_main_waitAFrame();
	stuffCmd("echo "+getStringVar("game."+sKey)+"\n");
}

void globalCoop_server_entryGet_dll(string sFile, string sKey, string sSection)
//----------------------------------------------------------------------
// Fake function, will be catched inside gamex86.dll and managed via the c++ code and stored in coop_status.ini
//----------------------------------------------------------------------
{
	//keep this dummy function, it is needed for the c++ code to work with the script
} */

void globalCoop_server_loadGivenMapNow(string sMap)
//----------------------------------------------------------------------
// Reboots the server and forces all players to reconnect
//----------------------------------------------------------------------
{
	//the games does create a savegame for sublevel in base/config/save
	
	//[b607] chrissstrahl - execute this function but once
	if(coop_integer_serverLoadingMap){
		globalCoop_main_print("COOP: server already loading map");
		return;
	}
	coop_integer_serverLoadingMap=1;

//WARNING!!!!! If we would have a delay here, the game gets stuck in the
//loading screen when firing up a server with sv_maxclients < 1 while trying to correct
	if(sMap == ""){
		globalCoop_main_print("globalCoop_server_loadGivenMapNow()->EMPTY MAPNAME! - LOADING zoo1");
		sMap = "zoo1";
	}
	
	//set map to load on reboot to server config (if writeable)
	stuffCMD("seta map \"" + sMap + "\"\n");
	
	//[b607] chrissstrahl - no intermission or it will seam like the server has crashed until intermissiontime is up
	noIntermission();
	//[b607] chrissstrahl - overwrite callvote nextmap		
	nextmap(sMap);
	
	//[b607] chrissstrahl - have a standard way to change levels
	cvar_string_mapname = sMap;
	globalCoop_level_triggerLevelChange();
}

void globalCoop_server_restartDelayed()
//----------------------------------------------------------------------
// Restarts the map with a delay
//----------------------------------------------------------------------
{
/*
	if(getLevelTime() > 240)//240
	{
		wait(10);
		if(globalCoop_server_reboot() != 1 || cvar_float_dedicated < 1)
		{
			if(cvar_string_mapname != "zoo1")
			{
				stuffCMD("restart\n");
			}
		}
	}
*/
}

float globalCoop_server_reboot()
//----------------------------------------------------------------------
// CHECK AND CALL SERVER REBOOT IF NEEDED
//----------------------------------------------------------------------
{
return 0;
/*
float fReboot;
	if(	globalCoop_server_checkRebootByMap(cvar_string_mapname) >= 5 || //loadad maps limit hit
		coop_vector_linuxForcerebootTransporting_y == 1 ||//forceReboot
		cvar_float_dedicated < 1)//flushtikis (!will not reboot!)
	{
		fReboot=1;
		thread globalCoop_server_rebootPerform();
	}
	return fReboot;
*/	
}

void globalCoop_server_rebootPerform()
//----------------------------------------------------------------------
// Reboots the server and forces all players to reconnect
//----------------------------------------------------------------------
{
/*
//Is this a Multiplayer Game
	if(cvar_bool_multiplayer)
	{
//CHECK FOR SERVER TYPE
		if(cvar_float_dedicated >= 1)
		{
//Check if we are allowed to reboot
			if(getCvarInt("coop_disReboot") != 1)
			{
//have letterbox gone away, or else players will not see HUD text!
				clearletterbox( .1 );
//SIGNAL THE MOD THAT A SERVER REBOT IS PERFORMED
				coop_vector_svnextmaporrebootDoloadnextmimapWaitingForTeam_x=1;
//PERFORM REBOOT NOW
				globalCoop_main_printTimeAndString("============= REBOOTING SERVER =============");
//INFORM PLAYERS ABOUT THE REBOOT
//AwaitingConnection - Warten auf Verbindung
					globalCoop_main_countDown("^5$$ServerInfo$$: ^2$$AwaitingConnection$$^3 - $$ConnectToServer$$ in:^5 ",4);
//IF LEVEL IS NOT COMPLETE; LOAD CURRENT MAP ON REBOOT,
//OTHERWISE DO NOT OVERWRITE WHAT HAS BEEN SAVED IN MISSIONCOMPLETE THREADS
				if(!coop_bool_nextMapIsSet)
				{
					stuffCMD("seta coop_sv_startcmd \"map "+cvar_string_mapname+"\"\n");
				}
///THIS IS A MAGIC CODE PASSAGE! (MACIG=never ever question or alter it!) ///
//KEEP PRINT MSG, IT IS THE ONYL WAY TO SYNC WITH CONSOLE
				print("SET: seta coop_svRebooted 1; & seta coop_lvlL 0;\n");//do not delte!!!->scny!!!!
				stuffCMD("seta coop_svRebooted 1\nseta coop_lvlL 0\n");
//TRIGGER LEVEL END TRIGGER, AVOIDS THE disconnect SYMBOL and sometimes the Server has Quit message
//I don't think we need this - deactivated coop-a5-buil8
				//thread globalCoop_level_triggerLevelChange();
//FORCE PLAYERS TO RECONNECT
				thread globalCoop_player_reconnectAll();
//MAGIC VALUE, DO NOT CHANGE EVER!
				wait(0.04);//0.04 seams to be the best //0.045 PING RANGE:50-150
//END OF MAGIC VALUE -> EVEN RUDINI WOUDN'T TOUCH THIS ONE!
				stuffCMD("quit \n");
				pause();
/// End of the Magic ///
			}
		}
		else
		{
//RESET IF WE KNOW FOR SURE THAT THI IS A LISTEN SERVER
			stuffCMD("seta coop_lvlL 0\n");
		}
//FLUSH TIKIS ANYWAY, PERFECT FOR LISTEN SERVERS AND SP!!!
		//stuffCMD("flushtikis\n");
	}
*/
}



void globalCoop_server_rebootTimer()
//----------------------------------------------------------------------
// Reboots the server if the level time is up
//----------------------------------------------------------------------
{	
	float fWaitTime;
	fWaitTime = getCvarInt("mp_timelimit");
	if(fWaitTime <= 0 )
	{
		fWaitTime = 60;
	}
	stuffCMD("set mp_timeLimit "+fWaitTime+" \n");
	fWaitTime = ((fWaitTime * 60) - getLevelTime() );
	wait(fWaitTime);//was plus -4
	thread globalCoop_main_globalMessage("^3$$TimeRanOut$$");
//END LEVEL
	globalCoop_level_endProcedur();
//while in cinematic or in a event which leads to the level end, this variable is set to allow next map load instad of server reloading current map
	if(coop_vector_svnextmaporrebootDoloadnextmimapWaitingForTeam_y == 1)
	{
		globalCoop_level_callReliably("coop_endLevel");
		wait(10);
	}
//Fail Mission
	globalCoop_mission_failWithReason("TimeRanOut");
	/*
//add server loading hud
	globalCoop_huds_AddAll("coop_serverLoading");
	*/
}


void globalCoop_server_checkAllMaps()
//----------------------------------------------------------------------
// TEST EVERY SINGLE MAP IF IT DOES NOT CHRASH! START WITH THE MAP 'secret1'
//----------------------------------------------------------------------
{
	if(cvar_bool_coop_developer){
		if(getCvarInt("coop_diag") == 1)
		{
			$world.time_scale(4);
			float fTime=10;
			globalCoop_main_countDown("^5SERVER^3 IS IN ^5DIAGNOSE-MODE^3, NEXT MAP ^5LOADING^3 IN^5::^5 ",fTime);
			globalCoop_level_callReliably("coop_endLevel");
			$world.time_scale(1);
		}else{
			$world.time_scale(1);
		}
	}
}


float globalCoop_server_checkRebootByMap(string sMap)
//----------------------------------------------------------------------
// Check if the server shall be rebooted
//----------------------------------------------------------------------
{
return 0;
/*
float	fReboot = 2,
		fLevelsLoadad;
//decide when to reboot
	if(	sMap == "zoo1" || sMap == "credits" || sMap == "ent-deck")
			fReboot = 0;
	if(	sMap == "secret1"		||
		sMap == "secret2"		||
		sMap == "secret3"		||
		sMap == "ent-training1" ||
		sMap == "ent-training2"	||
		sMap == "ent-training3" ||
		sMap == "ent-training4"	||
		sMap == "m5l2a-drull_ruins1")
			fReboot = 1;
	if(	sMap == "m3l1a-forever" ||
		sMap == "m5l1b-drull_ruins2" ||
		sMap == "m7l1a-attrexian_colony" ||
		sMap == "m11l1a-drull_ruins3" ||
		sMap == "coop_paradiseIsland")
			fReboot = 4;
	fLevelsLoadad = getCvarInt("coop_lvlL");
	fReboot += fLevelsLoadad;
	return fReboot;
*/
}


void globalCoop_server_listenServerControll()
//----------------------------------------------------------------------
// IMPORTANT RUTINE TO MANAGE THE COMMAND OVER FLOW ON A LISTEN SERVER
//----------------------------------------------------------------------
{
	if(cvar_bool_multiplayer){
		if(cvar_float_dedicated < 1){
			if(doesEntityExist($player)){
				globalCoop_player_waitForFreeReliableServerCommand($player);
			}
			else{
				entity ePlayer;
				float fPlayerIdInUse;
				
				for(fPlayerIdInUse=0;fPlayerIdInUse<coop_integer_maxPlayers;fPlayerIdInUse++){
					globalCoop_main_waitAFrame();
					ePlayer = getentity("player"+ fPlayerIdInUse);
					if(doesEntityExist(ePlayer))
					{
						globalCoop_player_waitForFreeReliableServerCommand(ePlayer);
						return;
					}
				}
			}
		}
//ELSE JUST WAIT ANOTHER FRAME
		else{
			globalCoop_main_waitAFrame();
		}
	}else{
		waitForPlayer();
		globalCoop_player_waitForFreeReliableServerCommand($player);
	}
}



